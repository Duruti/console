# Dies ist die 'Layout'-Beschreibungsdatei für ein NES-Rom

# Definiere das 'Memory-Layout' der Zielplattform, dem NES:
MEMORY 
{
	# Jeder Speicherbereich wird durch einen Namen und einem Doppelpunkt (':')
	# eingeleitet
	#
	#		Hier eine kurze Erläuterung der einzelnen Argumente eines Speicherbereichs
  #     start   - Definiert wo (ab welcher Speicheradresse) der Speicherbereichs
	#                beginnt
  #     size    - Die Größe eines Speicherbereichs (in Bytes)
  #     type    - Die Art des Speicherbereichs
  #              
  #               Es kann eine von 4 verschiedenen Arten gewählt werden:
  #
  #               ro  - bedeutet 'readonly', also nur lesender Zugriff
  #               rw  - bedeutet 'read-write', also lesender und schreibender
	#												Zugriff
  #               bss - bedeutet, dass dieser Speicherbereich nicht 
	#												initialisiert wurde
  #               zp  - bedeutet, dass dieser Speicherbereich innerhalb der 
	#												Zeropage liegt bzw. dass dieser Bereich die Zeropage
	#												ist. 
  #
	#     file    - definiert die Ausgabeformat innerhalb (der Programm-Datei) für
	#									diesen Speicherbereich
  #     fill    - definiert ob nicht benutzer Speicher mit einem Wert befüllt 
	#									werden soll
  #     fillval - definiert mit welchem Wert nicht benutzer Speicher befüllt 
	#									werden soll
	#									(
	#										Mit diesem Wert wird der Speicher nur befüllt, wenn ...
	#										 - ... es überhaupt unbenutzen Speicher gibt
	#										 - ... wenn 'fill' den Wert 'yes' besitzt, also das 
	#														Auffüllen von nicht benutzen Speicher 
	#														eingeschaltet wurde
	#									)

	# Im Header liegen später die Metadaten des NES-Roms, der sogenannte 
	#	'iNES-Header'
	# Adressen: $00-$09
  HEADER: 
    start   = $0000, 
    size    = $0010, 
    type    = ro, 
    file    = %O, 
    fill    = yes, 
    fillval = $00;

	# Die Zeropage liegt im restlichen Speicher, der über eine 8-Bit-Adresse
	# adressiert werden kann
	# Adressen: $10-$FF
  ZP:     
    start   = $0010, 
    size    = $00F0, 
    type    = rw;

	# In Seite 1 liegt der Stack (Adressen $100-$1FF). 
	# Diesen Bereich überspringen.

	# In Seite 2 können wir den 'Object Attribute Memory' ablegen, der die 
	#	Attribute der bis zu 64 Sprites beinhaltet.
	# Diesen Bereich überspringen.

	# Der Rest von Adresse $300 bis Adresse $7FF kann von uns als RAM benutzt 
	# werden.
	# Der RAM ist im NES 4-mal gespiegelt:
	#		$0000-$07FF - RAM-Mirror 1
	#   $0800-$0FFF - RAM-Mirror 2
	#   $1000-$17FF - RAM-Mirror 3
	#   $1800-$1FFF - RAM-Mirror 4
	#
	# Ein Schreiboperation nach Adresse $0800 beeinflusst daher auch automatisch 
	# die Adressen $0000, $1000 und $1800
  RAM:    
    start   = $0300, 
    size    = $0500, 
    type    = rw;

	# In der Lower-Bank beginnt unser Programmcode, wenn wir mehr als 16kb PRG-Rom
	# benötigen
#  LOWER_BANK:    
#    start   = $8000, 
#    size    = $4000, 
#    type    = ro, 
#    file    = %O, 
#    fill    = yes, 
#    fillval = $FF;

	# In der Upper-Bank sollte unser Programmcode beginnen, wenn wir nur 16kb 
	# PRG-Rom benötigen, damit die Vector-Table an der richtigen Adresse abgelegt
	# wird
  UPPER_BANK:    
    start   = $C000, 
    size    = $4000, 
    type    = ro, 
    file    = %O, 
    fill    = yes, 
    fillval = $FF;
}

# Verbinde Segmente, die innerhalb des Codes benutzt / befüllt werden können 
# mit den oben definieren Speicherbereichen
SEGMENTS 
{
	# Jedes einzelne Segment wird durch einen Namen und einen Doppelpunkt (':') 
	# eingeleitet
	#
	#		Hier eine kurze Erläuterung der einzelnen Argumente eines Segments
  #     load    - weist dem Segment einen Speicherbereich zu 
	# 		start   - bestimmt wo (ab welcher Adresse) das Segment beginnt 
	#									(innerhalb des angegebenen Speicherbereichs)
  #     type    - Die Art des Segment
  #              
  #               Es kann eine von 4 verschiedenen Arten gewählt werden:
  #
  #               ro  - bedeutet 'readonly', also nur lesender Zugriff
  #               rw  - bedeutet 'read-write', also lesender und schreibender
	#												Zugriff
  #               bss - bedeutet, dass dieser Speicherbereich nicht 
	#												initialisiert wurde
  #               zp  - bedeutet, dass dieser Speicherbereich innerhalb der 
	#												Zeropage liegt bzw. dass dieser Bereich die Zeropage
	#												ist. 
  #
  #     align   - richtet das Segment aus, sodass dieses an einer bestimmten 
	#									Stelle / Grenze im Speicherbereich steht. BSP: mit 
	#									'align=$100' kann man das Segment an einer Seitengrenze 
	#									ausrichten.
	#								Vereinfacht gesagt, muss die Startadresse des Segments durch
	#									den mithilfe 'align' angegebenen Wert ohne Rest teilbar 
	#									sein.
	#			optional - Das Segment muss nicht innerhalb des Programmcodes benutzt
	#									werden. Ohne diese Option würde der Linker eine Warnung
	#									ausgeben, dass eines der definierten Segmente nicht benutzt
	#									wird.
	#			define - 	Der Linker stellt 3 Symbole zur Verfügung, über die u.a. die 
	#									Größe und die Adresse des Segments abgefragt werden können
	#
  #			Hinweis: Wenn man mehr als ein Segment einem Speicherbereich zuordnet, 
	#								ist die Anordnung / Reihenfolge der folgenden Definitionen
	#								wichtig. Früher deklarierte Segmente besitzen immer eine 
	#								kleine Startadresse (innerhalb des Speicherbereichs) als 
	#								darunter deklarierte Segmente

	# INES_HEADER-Segment, der die Metadaten des NES-Roms enthält
  INES_HEADER:  
    load     = HEADER, 
    type     = ro, 
    align    = $10;

	# das Segment für die restliche Seite 0 (Zero-Page)
  ZEROPAGE: 
    load     = ZP, 
    type     = zp;

	# das Segment für den RAM
  BSS:      
    load     = RAM, 
    type     = bss, 
    define   = yes, 
    align    = $100;

	# das Segment für unseren Programmcode
  CODE:     
    load     = UPPER_BANK, 
    type     = ro, 
    align    = $100; 

	# das Segment für Daten, die nur zum Lesen verwandt werden
  DATA:   
    load     = UPPER_BANK, 
    type     = ro, 
    align    = $100;

	# das Segment für die Vektor-Tabelle am Ende des 2. 16KB-PRG-Roms
  VECTORS:  
    load     = UPPER_BANK, 
    type     = ro, 
    start    = $FFFA;
}

# Unsere Zieldatei ist eine Binärdatei (dies ist auch der Standard)
FILES 
{
  %O: format = bin;
}

